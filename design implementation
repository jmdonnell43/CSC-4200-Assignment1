# Documentation for Design Explanation

The design decisions and implementation specifics of the TCP Client-Server project with encryption are explained in this document.

## 1. Model of Client-Server Communication

The standard TCP socket-based client-server model that we employ in our implementation has the following features:

### Flow of Communication

1. **Server Initialization**: - The server establishes a TCP socket and connects it to a designated host and port.
   If there are no SSL certificates, it creates them. The server watches for incoming connections.

2. **Client Connection**: - The client uses the supplied host and port to connect to the server after creating a TCP socket and enclosing it in SSL.
   After connecting, the client can communicate with the server via encrypted messages.

3. **Message Handling** - - AES-256-CBC encryption is used to encrypt messages sent by clients.
   After receiving the encrypted message, the server logs it, decrypts it, and sends an encrypted acknowledgment.
   The client can keep sending encrypted messages until it breaks the connection. The client decrypts the acknowledgment and shows it to the user.

4. **Connection Termination**: - The client can type "exit" to end the connection. - The server gracefully manages unexpected disconnections.

## 2. Model of Threading

used a multi-threaded strategy to manage several clients at once:

### Threading on the Server

Each client thread executes the `handle_client` method, which controls the client's communication; the main server thread waits for incoming connections; and a separate thread is created for each new client connection using Python's `threading` module.
To guarantee that they end when the main program does, threads are created as daemon threads. A list of connected clients is kept for possible broadcast functionality.

### Advantages of Multi-Threading

- **Isolation**: Problems with one client don't impact others - 
**Simplicity**: Threading is simpler to set up than asynchronous approaches for this scale - 
**Concurrency**: Multiple clients can connect and communicate simultaneously

### Considerations for Thread Safety

Every client connection is managed in a separate thread with a separate state.
Only the main thread can add clients to the shared `clients` list, and individual client threads can remove themselves from it. Appropriate synchronization of shared resources is required for a production system.

## 3. Implementation of Encryption

For optimal security, a dual-layer encryption technique was used:

### Layer 1: Transport Layer SSL/TLS Encryption

**Certificate Generation**: - OpenSSL is used to automatically generate self-signed certificates; - A 2048-bit RSA key is used for robust encryption.
  The validity of certificates is 365 days.

**SSL Context**: - For server authentication, the server creates an SSL context; - For simplicity, the client creates an SSL context but turns off certificate verification.
  It is necessary to enable appropriate certificate verification in production.

**Socket Wrapping**: - The `ssl_context.wrap_socket()` method is used to wrap TCP sockets with SSL, guaranteeing that the entire connection is encrypted.

### Message Layer Layer 2: AES Encryption

The encryption process is as follows:
  1. Create a 16-byte Initialization Vector (IV) at random for every message.
  2. Using the encryption key and IV, create an AES cipher object in CBC mode.
  3. Make sure the plaintext is larger than the block size by padding it.
  4. The padded plaintext should be encrypted.
  5. Put the ciphertext and IV together (IV + ciphertext).
  6. For secure transmission, encode to base64.

**Decryption Procedure**:
  1. Decode the message in Base64
  2. Take out the first 16 bytes of the IV.
  3. Retrieve the remaining bytes of the ciphertext.
  4. Use the same key and extracted IV to create an AES cipher.
  5. Unpack the encrypted data. 
  6. Remove padding to get the original message

**Key Management**: - AES-256 encryption uses a 32-byte key.
  The key is hardcoded in both the client and the server for simplicity's sake.
  Secure key distribution would be used in a production setting.

### Dual-Layer Encryption Advantages

**Defense in Depth**: Two separate encryption methods offer extra protection. 
**Message-Level Security**: Individual messages are encrypted even in the event that the SSL/TLS connection is compromised. 
**Unique IVs**: Every message has a random IV that makes pattern recognition impossible.

## 4. Managing Errors

Comprehensive error handling for connection and encryption problems is part of our implementation:

### Covered Error Cases

Failed connections and SSL/TLS errors
Errors in sockets; failures in encryption and decryption
Message formats that are invalid
Unexpected client disconnections; general exclusions

Each log entry contains a timestamp, log level, and a descriptive message. Logs are kept in two files (`server_logs.log` and `client_logs.log`) and shown on the console.
For debugging purposes, encrypted messages are logged at the DEBUG level; decrypted messages are logged at the INFO level; and various log levels (INFO, ERROR, and DEBUG) are used appropriately.

## 6. Extra Design Factors

**Command Line Arguments**: Both the client and the server accept command-line arguments for host and port. 
**Clean Project Structure**: The code is arranged into logical classes and functions. 
**Makefile Integration**: basic commands for building, running, and cleaning the project. 
**PyCryptodome Library**: Used for dependable cryptographic operations. 
**Base64 Encoding**: Ensures that encrypted binary data can be safely transmitted as text. 
**Graceful Shutdown**: Both the client and the server appropriately handle shutdown signals.

## Possible Enhancements

1. Use HMAC to verify the integrity of messages
2. Include user authentication and handle passwords securely.
3. Put appropriate certificate verification into practice in production
4. For even greater scalability, employ an asynchronous strategy (such as asyncio).
5. Include a safe way to distribute keys.
6. Use key rotation to achieve perfect forward secrecy 7. Include file transfers with integrity checking
8. Put in place mechanisms for connection keep-alive


